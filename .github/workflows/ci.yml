name: build‑test‑release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh        # every run block uses PowerShell 7

    steps:
    # --- source code ---------------------------------------------------------
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # --- .NET SDK ------------------------------------------------------------
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        cache: true
        cache-dependency-path: |
          **/*.csproj
          **/*.sln

# --- restore & build -----------------------------------------------------
    - name: Restore packages
      run: dotnet restore src/VipbJsonTool/VipbJsonTool.csproj

    - name: Build (warnings ≠ errors)
      run: dotnet build src/VipbJsonTool/VipbJsonTool.csproj `
                        -c Release `
                        -p:TreatWarningsAsErrors=false `
                        --no-restore

    # --- publish single‑file CLI --------------------------------------------
    - name: Publish CLI (linux‑x64 single‑file)
      run: dotnet publish src/VipbJsonTool `
                          -c Release `
                          -r linux-x64 `
                          --self-contained `
                          -p:PublishSingleFile=true `
                          -p:TreatWarningsAsErrors=false `
                          --no-restore `
                          --no-build `
                          -o publish/linux-x64

    # --- PowerShell test prerequisites --------------------------------------
    - name: Install PowerShell modules
      run: |
        Install-Module PowerShell-Yaml -RequiredVersion 0.4.2 -Scope CurrentUser -Force
        Install-Module Pester          -Scope CurrentUser -Force

    # --- generate patch + run tests -----------------------------------------
    - name: Generate patch & run Pester tests
      run: |
        # 1. Convert VIPB → JSON
        ./publish/linux-x64/VipbJsonTool vipb2json "tests/Samples/NI Icon editor.vipb" tmp.json

        # 2. Enumerate JSON paths
        ./tools/Enumerate-VipbPaths.ps1 tmp.json |
          Out-File -Encoding utf8 all-paths.txt

        # 3. Build YAML patch file (with correct indentation)
        $patch = @('schema_version: 1', 'patch:')
        foreach ($p in Get-Content all-paths.txt) {
          if    ($p -match '\[\d+\]')      { $patch += "  ${p}: '__ARRAY__'" }
          elseif($p -match '@')            { $patch += "  ${p}: 'TEST'"      }
          elseif($p -in 'true','false')    { $patch += "  ${p}: true"        }
          else                             { $patch += "  ${p}: 'TEST'"      }
        }
        $patch | Out-File ci-patch-full.yml -Encoding utf8

        # 4. Show patch contents for debugging
        Get-Content ci-patch-full.yml

        # 5. Run tests
        Invoke-Pester tests/RoundTrip.Full.Tests.ps1 -CI
        Invoke-Pester tests/RoundTripSelective.Deep.Tests.ps1 -CI
      shell: pwsh

    # --- Docker image (optional) --------------------------------------------
    - name: Build Docker image
      run: docker build -t vipb-json:${{ github.sha }} .

    # --- artefact upload -----------------------------------------------------
    - name: Upload CLI artefact
      uses: actions/upload-artifact@v4
      with:
        name: vipb-json-cli-linux-x64
        path: publish/linux-x64/VipbJsonTool
