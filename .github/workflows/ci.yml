name: build-test-release

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh        # every run block uses PowerShell 7

    steps:
      # --- source code ---------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- .NET SDK ------------------------------------------------------------
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/*.sln

      # --- restore & build -----------------------------------------------------
      - name: Restore packages
        run: dotnet restore src/VipbJsonTool/VipbJsonTool.csproj

      - name: Build (warnings ≠ errors)
        run: dotnet build src/VipbJsonTool/VipbJsonTool.csproj `
                          -c Release `
                          -p:TreatWarningsAsErrors=false `
                          --no-restore

      # --- publish single-file CLI --------------------------------------------
      - name: Publish CLI (linux-x64 single-file)
        run: dotnet publish src/VipbJsonTool `
                            -c Release `
                            -r linux-x64 `
                            --self-contained `
                            -p:PublishSingleFile=true `
                            -p:TreatWarningsAsErrors=false `
                            --no-restore `
                            --no-build `
                            -o publish/linux-x64

      # --- PowerShell test prerequisites --------------------------------------
      - name: Install PowerShell modules
        run: |
          Install-Module PowerShell-Yaml -RequiredVersion 0.4.2 -Scope CurrentUser -Force
          Install-Module Pester          -Scope CurrentUser -Force

      - name: Generate patch template & run Pester tests
        shell: pwsh
        run: |
          $vipb      = "tests/Samples/NI Icon editor.vipb"
          $json      = "tmp.json"
          $paths     = "all-paths.txt"
          $patchFile = "ci-patch-full.yml"

          # 1. VIPB → JSON
          ./publish/linux-x64/VipbJsonTool vipb2json $vipb $json

          # 2. Enumerate JSON paths (write reliably to disk)
          ./tools/Enumerate-VipbPaths.ps1 $json |
            Out-File -Encoding utf8 $paths

          # 3. Sanity-check that enumeration succeeded
          if (-not (Test-Path $paths)) {
            Write-Error "ERROR: path enumeration failed; '$paths' not found."
            exit 1
          }
          if ((Get-Content $paths).Count -eq 0) {
            Write-Warning "WARNING: no paths enumerated (file is empty)."
          }

          # 4. Build patch YAML, guarantee at least one entry
          $lines = @(
            'schema_version: 1',
            'patch:'
          )
          foreach ($p in Get-Content $paths) {
            if    ($p -match '\[\d+\]')      { $lines += "  ${p}: '__ARRAY__'" }
            elseif($p -match '@')            { $lines += "  ${p}: 'TEST'"      }
            elseif($p -in 'true','false')    { $lines += "  ${p}: true"        }
            else                             { $lines += "  ${p}: 'TEST'"      }
          }
          if ($lines.Count -le 2) {
            # fallback entry so patch file isn’t empty
            $lines += '  Library_General_Settings.Company_Name.__text: ""'
          }
          $lines | Out-File -Encoding utf8 $patchFile
          Write-Host "→ Wrote patch file '$patchFile' with $($lines.Count - 2) entries"

      - name: Sanity-check artefacts
        run: |
          test -f tmp.json          || (echo 'ERROR: tmp.json missing' && exit 1)
          test -f all-paths.txt     || (echo 'ERROR: all-paths.txt missing' && exit 1)
          test -f ci-patch-full.yml || (echo 'ERROR: patch YAML missing' && exit 1)

      - name: Run Pester tests
        shell: pwsh
        run: |
          # 1. Basic round-trip
          Invoke-Pester tests/RoundTrip.Tests.ps1 -CI

          # 2. Full-coverage round-trip with patch
          Invoke-Pester -CI -Script @{
            Path       = 'tests/RoundTrip.Full.Tests.ps1'
            Parameters = @{ PatchFile = 'ci-patch-full.yml'; SourceVipb = 'tests/Samples/NI Icon editor.vipb' }
          }

          # 3. Deep selective-patch test
          Invoke-Pester -CI -Script @{
            Path       = 'tests/RoundTrip.Deep.Tests.ps1'
            Parameters = @{ PatchFile = 'ci-patch-full.yml'; SourceVipb = 'tests/Samples/NI Icon editor.vipb' }
          }
        continue-on-error: true

      # --- Docker image (optional) --------------------------------------------
      - name: Build Docker image
        run: docker build -t ghcr.io/labview-community-ci-cd/seed:${{ github.sha }} .

      # --- Push Docker image to GHCR (main branch and tags only) --------------
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Tag Docker image as 'latest' and branch/tag
        run: |
          docker tag ghcr.io/labview-community-ci-cd/seed:${{ github.sha }} ghcr.io/labview-community-ci-cd/seed:latest
          docker tag ghcr.io/labview-community-ci-cd/seed:${{ github.sha }} ghcr.io/labview-community-ci-cd/seed:${{ github.ref_name }}

      - name: Push Docker images
        run: |
          docker push ghcr.io/labview-community-ci-cd/seed:${{ github.sha }}
          docker push ghcr.io/labview-community-ci-cd/seed:latest
          docker push ghcr.io/labview-community-ci-cd/seed:${{ github.ref_name }}



      # --- artefact upload -----------------------------------------------------
      - name: Upload CLI artefact
        uses: actions/upload-artifact@v4
        with:
          name: vipb-json-cli-linux-x64
          path: publish/linux-x64/VipbJsonTool
