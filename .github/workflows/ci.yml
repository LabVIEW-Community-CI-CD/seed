name: build-test-release

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore & build
        run: dotnet build src/VipbJsonTool/VipbJsonTool.csproj -c Release

      - name: Publish self‑contained single file (linux‑x64)
        run: dotnet publish src/VipbJsonTool -c Release -r linux-x64 --self-contained -o publish/linux-x64-singlefile

      - name: Generate round‑trip artifacts
        shell: pwsh
        run: |
          dotnet run --project src/VipbJsonTool -- vipb2json 'tests/Samples/NI Icon editor.vipb' tmp.json
          dotnet run --project src/VipbJsonTool -- patch2vipb tmp.json tmp.vipb ci-patch.yml '' ''
          dotnet run --project src/VipbJsonTool -- vipb2json tmp.vipb tmp2.json

      - name: Prepare PowerShell.Yaml for deep test
        shell: pwsh
        run: |
          $pkg  = 'powershell-yaml'
          $ver  = '0.4.2'
          $url  = "https://www.powershellgallery.com/api/v2/package/$pkg/$ver"
          Invoke-WebRequest -Uri $url -OutFile "$pkg.$ver.nupkg"
          $dest = "$(pwd)/$pkg-nupkg"
          New-Item -ItemType Directory -Force -Path $dest | Out-Null
          Add-Type -AssemblyName 'System.IO.Compression.FileSystem'
          [IO.Compression.ZipFile]::ExtractToDirectory("$pkg.$ver.nupkg", $dest)
          $psm1 = Join-Path $dest "tools/PowerShell.Yaml.psm1"
          if (-not (Test-Path $psm1)) {
            Write-Host "File listing for $dest:"
            Get-ChildItem -Recurse $dest | Write-Host
            Write-Error "PowerShell.Yaml.psm1 not found at $psm1 after extraction!"
            exit 1
          }
          Import-Module $psm1 -Force
          Write-Host "PowerShell.Yaml imported from $psm1"

      - name: Run Pester tests
        shell: pwsh
        run: |
          $psm1 = Get-ChildItem -Recurse -Filter PowerShell.Yaml.psm1 -Path "$(pwd)/powershell-yaml-nupkg" | Select-Object -ExpandProperty FullName -First 1
          Import-Module $psm1 -Force
          Install-Module Pester -Force -Scope CurrentUser
          Invoke-Pester tests -CI
          Invoke-Pester tests/RoundTrip.Deep.Tests.ps1


      - name: Build Action image
        run: docker build -t vipb-json:${{ github.sha }} .

      - uses: actions/upload-artifact@v4
        with:
          name: vipb-json-cli
          path: publish/linux-x64-singlefile/VipbJsonTool
