name: build-test-release

on:
  push:
    branches: [ main ]
    tags:  [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh

    steps:
      # ------------------------------------------------------------
      # 1. Checkout
      # ------------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ------------------------------------------------------------
      # 2. .NET SDK + caching
      # ------------------------------------------------------------
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x           # match repo global.json / target
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/*.sln

      # ------------------------------------------------------------
      # 3. Restore, build, and publish VipbJsonTool
      # ------------------------------------------------------------
      - name: Restore (VipbJsonTool)
        run: dotnet restore src/VipbJsonTool/VipbJsonTool.csproj

      - name: Build (VipbJsonTool, Release)
        run: dotnet build src/VipbJsonTool/VipbJsonTool.csproj -c Release --no-restore -p:TreatWarningsAsErrors=false

      - name: Publish VipbJsonTool (linux‑x64, single‑file)
        run: |
          dotnet publish src/VipbJsonTool \
            -c Release -r linux-x64 --self-contained \
            -p:PublishSingleFile=true -p:TreatWarningsAsErrors=false \
            --no-restore --no-build \
            -o publish/vipb-linux-x64

      # ------------------------------------------------------------
      # 4. Restore, build, and publish LvprojJsonTool
      # ------------------------------------------------------------
      - name: Restore (LvprojJsonTool)
        run: dotnet restore src/LvprojJsonTool/LvprojJsonTool.csproj

      - name: Build (LvprojJsonTool, Release)
        run: dotnet build src/LvprojJsonTool/LvprojJsonTool.csproj -c Release --no-restore -p:TreatWarningsAsErrors=false

      - name: Publish LvprojJsonTool (linux‑x64, single‑file)
        run: |
          dotnet publish src/LvprojJsonTool \
            -c Release -r linux-x64 --self-contained \
            -p:PublishSingleFile=true -p:TreatWarningsAsErrors=false \
            --no-restore --no-build \
            -o publish/lvproj-linux-x64

      # ------------------------------------------------------------
      # 5. Install Pester (for tests + coverage)
      # ------------------------------------------------------------
      - name: Install Pester
        run: Install-Module Pester -Force -Scope CurrentUser

      # ------------------------------------------------------------
      # 6. Run *all* Pester tests with coverage enabled
      # ------------------------------------------------------------
      - name: Run Pester tests with coverage
        run: |
          $Config = New-PesterConfiguration
          $Config.Run.Path              = 'tests'           # run every *.Tests.ps1
          $Config.CodeCoverage.Enabled  = $true
          $Config.CodeCoverage.Path     = 'tools/*.ps1'     # or adjust to scripts you want coverage on
          $Config.TestResult.Enabled    = $true
          $Config.TestResult.OutputFormat = 'NUnitXml'
          $Config.TestResult.OutputPath   = 'test-results.xml'

          $result = Invoke-Pester -Configuration $Config
          if ($result.FailedCount -gt 0) { exit 1 }

      # ------------------------------------------------------------
      # 7. Upload test results & coverage
      # ------------------------------------------------------------
      - name: Upload test results (NUnit XML)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-test-results
          path: test-results.xml

      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pester-code-coverage
          path: coverage.xml      # produced automatically by Pester when CodeCoverage.Enabled = true

      # ------------------------------------------------------------
      # 8. Upload YAML artifacts (generated by tests/scripts)
      # ------------------------------------------------------------
      - name: Upload seed-vipb.yaml
        if: success() && (hashFiles('release/seed-vipb.yaml') != '')
        uses: actions/upload-artifact@v4
        with:
          name: seed-vipb.yaml
          path: release/seed-vipb.yaml

      - name: Upload seed-lvproj.yaml
        if: success() && (hashFiles('release/seed-lvproj.yaml') != '')
        uses: actions/upload-artifact@v4
        with:
          name: seed-lvproj.yaml
          path: release/seed-lvproj.yaml

      # ------------------------------------------------------------
      # 9. Upload published CLI binaries
      # ------------------------------------------------------------
      - name: Upload VipbJsonTool binary
        uses: actions/upload-artifact@v4
        with:
          name: vipb-json-cli-linux-x64
          path: publish/vipb-linux-x64/VipbJsonTool

      - name: Upload LvprojJsonTool binary
        uses: actions/upload-artifact@v4
        with:
          name: lvproj-json-cli-linux-x64
          path: publish/lvproj-linux-x64/LvprojJsonTool
