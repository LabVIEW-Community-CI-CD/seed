name: build-test-release

on:
  push:
    branches: [ main ]
    tags:  [ 'v*' ]
  pull_request:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh

    steps:
      # --- source code ---------------------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # --- .NET SDK ------------------------------------------------------------
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
          cache: true
          cache-dependency-path: |
            **/*.csproj
            **/*.sln

      # --- restore & build -----------------------------------------------------
      - name: Restore packages
        run: dotnet restore src/VipbJsonTool/VipbJsonTool.csproj

      - name: Build (warnings â‰  errors)
        run: dotnet build src/VipbJsonTool/VipbJsonTool.csproj `
                          -c Release `
                          -p:TreatWarningsAsErrors=false `
                          --no-restore

      # --- publish single-file CLI ---------------------------------------------
      - name: Publish CLI (linux-x64 single-file)
        run: dotnet publish src/VipbJsonTool `
                            -c Release `
                            -r linux-x64 `
                            --self-contained `
                            -p:PublishSingleFile=true `
                            -p:TreatWarningsAsErrors=false `
                            --no-restore `
                            --no-build `
                            -o publish/linux-x64

      # --- PowerShell test prerequisites ---------------------------------------
      - name: Install Pester
        run: Install-Module Pester -Force -Scope CurrentUser

      # --- Run CLI round-trip tests (VIPB & LVPROJ, all modes) -----------------
      - name: Run CLI conversion tests (VIPB and LVPROJ round-trip)
        run: |
          # VIPB legacy modes
          dotnet run --project src/VipbJsonTool vipb2json tests/Samples/seed.vipb tests/tmp/seed.vipb.json
          dotnet run --project src/VipbJsonTool json2vipb tests/tmp/seed.vipb.json tests/tmp/seed.vipb.roundtrip

          # LVPROJ new modes
          dotnet run --project src/VipbJsonTool lvproj2json tests/Samples/seed.lvproj tests/tmp/seed.lvproj.json
          dotnet run --project src/VipbJsonTool json2lvproj tests/tmp/seed.lvproj.json tests/tmp/seed.lvproj.roundtrip

          # Unified wrapper modes (should work identically)
          dotnet run --project src/VipbJsonTool buildspec2json tests/Samples/seed.vipb tests/tmp/seed.vipb.json
          dotnet run --project src/VipbJsonTool json2buildspec tests/tmp/seed.vipb.json tests/tmp/seed.vipb.roundtrip
          dotnet run --project src/VipbJsonTool buildspec2json tests/Samples/seed.lvproj tests/tmp/seed.lvproj.json
          dotnet run --project src/VipbJsonTool json2buildspec tests/tmp/seed.lvproj.json tests/tmp/seed.lvproj.roundtrip

          # Optionally, diff original and roundtripped outputs (or use Pester scripts)

      # --- Run Pester tests ----------------------------------------------------
      - name: Run Pester tests (Basic and Golden Sample)
        run: |
          $failures = $false
          $resultBasic = Invoke-Pester -Configuration @{
            Run = @{ Path = 'tests/RoundTrip.Tests.ps1'; PassThru = $true }
            TestResult = @{ Enabled = $true; OutputFormat = 'NUnitXml'; OutputPath = 'basic-test-results.xml' }
          }
          if ($resultBasic.FailedCount -gt 0) { $failures = $true }
          $resultGolden = Invoke-Pester -Configuration @{
            Run = @{ Path = 'tests/RoundTrip.GoldenSample.Tests.ps1'; PassThru = $true }
            TestResult = @{ Enabled = $true; OutputFormat = 'NUnitXml'; OutputPath = 'golden-sample-results.xml' }
          }
          if ($resultGolden.FailedCount -gt 0) { $failures = $true }
          if ($failures) { exit 1 }

      # --- Upload Test Results --------------------------------------------------
      - name: Upload Test Results
        if: always()    # always upload, even on failure or PR, for debugging
        uses: actions/upload-artifact@v4
        with:
          name: pester-test-results
          path: |
            basic-test-results.xml
            golden-sample-results.xml

      # --- Docker image build (for main branch and tags) -----------------------
      - name: Build Docker image
        run: docker build -t ghcr.io/labview-community-ci-cd/seed:${{ github.sha }} .

      - name: Docker login, tag & push
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Tag Docker images
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        run: |
          docker tag ghcr.io/labview-community-ci-cd/seed:${{ github.sha }} ghcr.io/labview-community-ci-cd/seed:latest
          docker tag ghcr.io/labview-community-ci-cd/seed:${{ github.sha }} ghcr.io/labview-community-ci-cd/seed:v2
          docker tag ghcr.io/labview-community-ci-cd/seed:${{ github.sha }} ghcr.io/labview-community-ci-cd/seed:${{ github.ref_name }}

      - name: Push Docker images
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
        run: |
          docker push ghcr.io/labview-community-ci-cd/seed:${{ github.sha }}
          docker push ghcr.io/labview-community-ci-cd/seed:latest
          docker push ghcr.io/labview-community-ci-cd/seed:v2
          docker push ghcr.io/labview-community-ci-cd/seed:${{ github.ref_name }}

      # --- artifact upload (CLI binary) ----------------------------------------
      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: vipb-json-cli-linux-x64
          path: publish/linux-x64/VipbJsonTool
